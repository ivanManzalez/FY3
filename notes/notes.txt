=====================================================
=====================================================
FY3
 > Schedule
 > Highlights
 > Statistics

#####################################################
## GIT COMMANDS ####################################
#####################################################

// list all git branches
git branch [-checkout] [branch_name]

// delete branch locally
git branch -d localBranchName

// delete branch remotely
git push origin --delete remoteBranchName

// switch unstaged changes to a new branch
https://css-tricks.com/git-switching-unstaged-changes-to-a-new-branch/

git status
git stash --include-untracked
git checkout master
git pull
git branch content/sharis
git checkout content/sharis
git stash pop

or 

git switch -c <new-branch>

Remove untracked changes:
git clean -f


#####################################################
## Virtual Machine ##################################
#####################################################
initi venv:
python -m venv /path/to/new/virtual/environment

activate virtual env:
	source project_env_name/bin/activate 
	(should see env name in paratheses)

deactivate virtual env:
	deactivate

#####################################################
## Django Set up ####################################
#####################################################

-- Install django --
pip install django 

-- Check Django --
python3 -m django --version


#####################################################
## Create New Project ###############################
#####################################################

django-admin (will show list of subcommands)

-- Start Project --
django-admin startproject project_name

-- Default Structure of New Django Project --
project_name
>__init__.py
	empty file (tells python this is a package)
>settings.py
	settings and configurations file
>urls.py
	set up mapping from certain URLs to where we send the user
>wsgi.py
	how python web app and web server communicate (default - no changes to be made)
>asgi.py
	what is this for?
manage.py (no changes made to this file)


#####################################################
## Run Server to Start Web App ######################
#####################################################

-- Start Server --
python manage.py runserver
(local host URL is provided - leave running while using web app)

-- Stop Server --
CTRL + C

-- What are migrations? --
Migrations are Django's way of propagating changes you make to your models (adding a field, deleting a model, etc.) into your database schema

MIGRATE COMMANDS:
migrate -- which is responsible for applying and unapplying migrations.
makemigrations -- which is responsible for creating new migrations based on the changes you have made to your models.
sqlmigrate -- which displays the SQL statements for a migration.
showmigrations -- which lists a projectâ€™s migrations and their status.


#####################################################
## Webpack Issue     ######################
#####################################################


sh: webpack: command not found

Command Search in the Terminal: 
When you type a command in the terminal and hit Enter, the computer looks for that command in specific places on your system. These places are defined by something called the "PATH".

Global vs Local Commands:
>> Global Commands: Some commands, like webpack, can be installed globally on your system. This means they are available no matter which folder you're in. You install them once, and you can use them from anywhere.
>> Local Commands: Some commands are specific to a particular project. They are installed inside that project's folder and are only available when you're inside that folder.

Changing Directories: 
When you move your project files from one folder to another, the "PATH" the system uses to look for commands might change. So, a command that worked before might not work if the 
PATH isn't set up to find it in the new location.

Solution Options:
>> Install Globally: You can install webpack globally, so it's available no matter where you are. This is done using 'npm install -g webpack' in the terminal.
>> Use npx: If you don't want to install globally, you can use npx before the command. It helps run commands that are not globally installed. For example, "npm install webpack webpack-cli --save-dev"

Best Practice: 
It's a good idea to manage your project's tools and dependencies locally (inside the project's folder) rather than relying on global installations. This way, your project remains self-contained and doesn't rely on specific global setups.


#####################################################
## React Context     ######################
#####################################################

In React, a context is a way to pass data through the component tree without having to pass props down manually at every level. It's a mechanism that allows you to share data that can be considered "global" for a tree of React components. Context is often used for data like user authentication, theme, language preferences, etc., which need to be accessed by multiple components at different levels in the component tree.

Imagine you're in a big office building with many rooms. Each room represents a different React component in your app. You need to pass around a special badge to show if someone is a VIP (authenticated user) or not.

Instead of running around and giving a badge to everyone yourself, you have a "Badge Provider" at the building entrance. Whenever someone enters, they automatically get a badge if they're a VIP. And if they leave, the badge is taken away.

Now, when anyone in any room wants to check if someone is a VIP, they don't need to ask you. They just look at their badge. That's like using context in React.

--- Here's how it maps to coding ---

Create a Context:
You make a "Badge Context" that holds the VIP badge status.

Provide the Context:
You put the "Badge Provider" around your app (or part of it). This Provider gives badges to those who should have one and takes them away when they leave.

Consume the Context:
In any room (component) where you want to check if someone is a VIP, you just look at their badge. You're not running around to check if they're a VIP every time.

--- In coding terms ---

Creating a Context: 
You create a createContext() in React.

Providing the Context: 
You wrap your app with a "Provider" component. This provides the VIP badge to the whole app.

Consuming the Context: 
In any component, you use useContext() to check if someone has a VIP badge. This saves you from asking everywhere if they're a VIP.

So, context helps you avoid passing VIP badges manually from room to room. You just set it up once, and every room (component) can access the VIP status without asking you every time.

#####################################################
## Applications and Routes     ######################
#####################################################

-- Create Sub Applications in Web App --
python3 manage.py startapp app_name

-- Files created due to startapp command --
app_name
> __init__.py
> admin.py
> apps.py
> migrations
	> __init__.py 
> models.py
> tests.py
> views.py

-- Routes --
need to map URL pattern to url function in
urls.py module in 'home' application 

This is done to control where the user goes in 
application based on ending of URL



#####################################################
## Templates     ######################
#####################################################

-- Create directory to store Template HTML files --
by default Django looks for 'templates' subdir in each installed app

-- Inherit format from specified file
{% extends "dir/in/app/templates/dir/file.html"%}

-- Block title
{% block title %}{% endblock %}

-- Block content
{% block content %}{% endblock %}

-- For loop
{% for var in iterable %}
{% empty %} # if list is empty 
{% endfor %}

-- IF example
{% if athlete_list %}
    Number of athletes: {{ athlete_list|length }}
{% elif athlete_in_locker_room_list %}
    Athletes should be out of the locker room soon!
{% else %}
    No athletes.
{% endif %}


Structure: 
AppName -> templates -> AppName

-- Add Application to list of installed Apps --
let Django know to look for templates directory

add subapp configuration (class name) to app's settings.py module

subapp's configuration is located in apps.py module

now point subapp.views function to templates directory

-- CSS --
Django looks for css links in 'static' folder in subapp
Store css files there
{load static}


#####################################################
## Admin   ##########################################
#####################################################

-- Create new admin user:
(Need to create DB before running command to store info)
python3 manage.py createsuperuser

user1: ivanmanciag
pass1: password123

-- Detects & prepares Django to make updates to DB 
(doesnt run those changes)
python3 manage.py makemigrations

-- Apply (Run) Migrations
python3 manage.py migrate

#####################################################
## Static  ##########################################
#####################################################

Add 'static' file at project level to store 
css, js, images, videos, etc.

Must tell Django to look into this folder for these 
files
	app > settings.py > In static files 'section'
	STATICFILES_DIRS = [
    BASE_DIR/'static',    
]

Need to load static files to html templates
	{% load static %}

When referencing any file in the static dir:
	src/href/etc = "{% static 'subdir/filename.ext' %}"

#####################################################
## DBs & Migrations   ###############################
#####################################################


Create real DB for Application
Django has built in ORM (translator)
	- Can use different DBs by changing in settings

Represent DBs as classes (Models)
User model already created
	- Can add custom fields

Syntax:

class model_Name(models.Model):
	## field/col in db
	attr01 = models.CharField(max_length = N)
	attr02 = models.AutoField()
	attr03 = models.BigAutoField()
	attr04 = models.BigIntegerField()
	attr05 = models.BinaryField()
	attr06 = models.BooleanField()
	attr07 = models.DateField()
	attr08 = models.DateTimeField()
	attr09 = models.DecimalField()
	attr10 = models.DurationField()
	attr11 = models.EmailField()
	attr12 = models.FileField()
	attr13 = models.FilePathField()
	attr14 = models.FloatField()
	attr15 = models.GenericIPAddressField()
	attr16 = models.ImageFied()
	attr17 = models.IntegerField()
	attr18 = models.JSONField()
	#etc.

# Can access data from DB

from app_name.models import model_name
from django.contrib.auth.models import User

#queries
User.objects.all() #returns queryset for all users 
User.objects.first() #returns first object
User.objects.last()
#filter based on fieldname defined in models
User.objects.filter(fieldname="value")
#create object
model_1 = model_name(field1='val1', field2='val3', etc.)
#save newly created obj
model_1.save()

#####################################################
## Aggregate v Annotate   ###########################
#####################################################

aggregate() = summary of stats of entire querysets
annotate() = summary of individual stats of querysets for each item in the set

#####################################################
## Why should Nav be outside of Routes?  ############
#####################################################
In React Router v6, the structure and usage of the routing components have changed compared to v5. In v6, the Routes component is used as the top-level component to define the routing configuration, and it expects its child Route components to be direct children.

In your previous code, you had the Navbar component nested within the Routes component, which caused the error. The Routes component expects its direct children to be Route components, so any other components, such as the Navbar component, should be placed outside the Routes component.

By moving the Navbar component outside the Routes component, you ensure that the routing configuration is properly defined within the Routes component, and the Navbar component remains separate and outside the routing structure.

Here's the updated code structure:
#####################################################
## POSTGRESQL DB                        ############
#####################################################

-- run postgres db server? --
psql -h localhost -U iamancia -d fy3_db

-- wipe db --
DO $$ 
DECLARE 
   r RECORD; 
BEGIN 
   FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
   LOOP 
      EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE'; 
   END LOOP; 
END $$;

#####################################################
##  User authentication in Django        ############
#####################################################

Role Types:
	- Commissioner
	- Player
	- GM
	- Spectator

The auth system consists of:

> Users
> Permissions: Binary (yes/no) flags designating whether a user may perform a certain task.
> Groups: A generic way of applying labels and permissions to more than one user.
> Configurable password hashing system
> Forms and view tools for logging in users, or restricting content
> Pluggable backend system

doesnâ€™t provide:
> Password strength checking
> Throttling of login attempts
> Authentication against third-parties (OAuth, for example)
> Object-level permissions

django.contrib.auth & .contenttypes already included in INSTALLED_APPS 
SessionMiddleware & AuthenticationMiddleware already included in MIDDLEWARE






=====================================================
=====================================================